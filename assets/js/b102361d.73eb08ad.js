(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[852],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,h=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4285:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:1,slug:"/"},l="Dentest, the Behavior Driven flow using Gherkin syntax",p={unversionedId:"behavior-driven-flow",id:"behavior-driven-flow",isDocsHomePage:!1,title:"Dentest, the Behavior Driven flow using Gherkin syntax",description:"Specifying and implementing features are two different jobs, that shouldn't be done by the same people.",source:"@site/docs/behavior-driven-flow.md",sourceDirName:".",slug:"/",permalink:"/",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"What is Dentest?",permalink:"/what-is-dentest"}},u=[],c={toc:u};function d(e){var t=e.components,s=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dentest-the-behavior-driven-flow-using-gherkin-syntax"},"Dentest, the Behavior Driven flow using Gherkin syntax"),(0,i.kt)("p",null,"Specifying and implementing features are two different jobs, that shouldn't be done by the same people. "),(0,i.kt)("p",null,"First of all, if a product need hasn't been well understood, having the same people writing the specs, implementing them,\nand validating they have been respected, something's wrong somewhere. "),(0,i.kt)("p",null,"Then, people defining product needs and people implementing them are not always using the same words for the same things.\nWhich makes the communication harder between the different parties. "),(0,i.kt)("p",null,"Also, developers often tend to write tests after having implemented their tasks, and there can be a bias. Are they\nimplementing tests according to the original business need, or are they testing that ",(0,i.kt)("strong",{parentName:"p"},"their")," implementation works?\nTests written after the development are more likely to be less relevant than a clear definition from the start."),(0,i.kt)("p",null,"Luckily, a language called ",(0,i.kt)("em",{parentName:"p"},"Gherkin")," provides the perfect syntax to make all the parties work together around features,\nby making them speak the same language, which is the language of your business. Plus, it can help everybody to have the\nfeature described before its being implemented, so that the developers can focus on what they're expert in: building your\nproduct. Last but not least, ",(0,i.kt)("em",{parentName:"p"},"Gherkin")," is agnostic from the technology you're using to develop your product, and\nintegrates perfectly in the automation tools you're using to validate your development."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Dentest")," provides the interface that will help all these parties to write, use and read ",(0,i.kt)("em",{parentName:"p"},"Gherkin"),", and respect the\nfollowing recommended flow:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8770).Z})))}d.isMDXComponent=!0},8770:function(e,t,n){"use strict";t.Z=n.p+"assets/images/flow-b512669ce2d616d2c8265622149d5c56.png"}}]);